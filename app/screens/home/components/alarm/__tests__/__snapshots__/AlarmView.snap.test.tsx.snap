// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should renders correctly 1`] = `
<View>
  <View
    collapsable={false}
    forwardedRef={[Function]}
    handlerTag={1}
    handlerType="PanGestureHandler"
    onGestureHandlerEvent={[Function]}
    onGestureHandlerStateChange={[Function]}
    onLayout={[Function]}
    style={
      {
        "flex": 1,
        "overflow": "hidden",
      }
    }
  >
    <View
      collapsable={false}
      style={
        {
          "bottom": 0,
          "flexDirection": "row",
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
          "transform": [
            {
              "translateX": -10000,
            },
          ],
        }
      }
    >
      <View
        collapsable={false}
        style={
          {
            "alignItems": "center",
            "flexDirection": "row-reverse",
            "transform": [
              {
                "scale": 0,
              },
            ],
          }
        }
      >
        <View
          accessibilityState={
            {
              "busy": undefined,
              "checked": undefined,
              "disabled": undefined,
              "expanded": undefined,
              "selected": undefined,
            }
          }
          accessibilityValue={
            {
              "max": undefined,
              "min": undefined,
              "now": undefined,
              "text": undefined,
            }
          }
          accessible={true}
          collapsable={false}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            {
              "opacity": 1,
            }
          }
        >
          <Image
            source={
              {
                "testUri": "../../../app/assets/images/TrashBin.png",
              }
            }
            style={
              {
                "height": 50,
                "width": 50,
              }
            }
          />
        </View>
      </View>
      <View
        onLayout={[Function]}
      />
    </View>
    <View
      collapsable={false}
      forwardedRef={[Function]}
      handlerTag={2}
      handlerType="TapGestureHandler"
      onGestureHandlerEvent={[Function]}
      onGestureHandlerStateChange={[Function]}
      pointerEvents="auto"
      style={
        {
          "transform": [
            {
              "translateX": -0,
            },
          ],
        }
      }
    >
      <View
        style={
          {
            "flexDirection": "row",
          }
        }
      >
        <View
          style={
            {
              "flexGrow": 1,
            }
          }
        >
          <Text
            onPress={[Function]}
            style={
              {
                "color": "#7f7f7f",
                "fontSize": 35,
              }
            }
          >
            12:00
          </Text>
          <Text
            style={
              {
                "color": "#a4a4a4",
              }
            }
          >
            testing
          </Text>
          <RNDateTimePicker
            date={1687817628067}
            displayIOS="default"
            enabled={true}
            is24Hour={true}
            mode="time"
            onChange={[Function]}
            onPickerDismiss={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
          />
        </View>
        <View
          style={
            {
              "alignItems": "center",
              "flexDirection": "row-reverse",
              "padding": 10,
            }
          }
        >
          <RCTSwitch
            accessibilityRole="switch"
            onChange={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              {
                "height": 31,
                "width": 51,
              }
            }
            testID="switch"
            value={true}
          />
        </View>
      </View>
    </View>
  </View>
</View>
`;
